{
  "address": "0x7A9737CEf46630f32948842B96b50E4E477a0dc1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initalSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "TokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "TokenSYM",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reawrd",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "ContractFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NewFund",
      "outputs": [
        {
          "internalType": "contract FundContract",
          "name": "Name",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ContractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ContractName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GoalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ContractName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_Duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "FundingGoal",
          "type": "uint256"
        }
      ],
      "name": "NewFundContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "_blockReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_TokenName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_TokenSYM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec45f43b241838ba46e5fb8a8a4b05630b6fb0211c4b9feffef8bee9814a73b0",
  "receipt": {
    "to": null,
    "from": "0x0a0179860323B23d990E71f7ee006238D8720179",
    "contractAddress": "0x7A9737CEf46630f32948842B96b50E4E477a0dc1",
    "transactionIndex": 53,
    "gasUsed": "4386051",
    "logsBloom": "0x
    "blockHash": "0x1c40c5adce7f77afce74804ddc373145482d308995efa940ce7342a80d8e54a0",
    "transactionHash": "0xec45f43b241838ba46e5fb8a8a4b05630b6fb0211c4b9feffef8bee9814a73b0",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 8572731,
        "transactionHash": "0xec45f43b241838ba46e5fb8a8a4b05630b6fb0211c4b9feffef8bee9814a73b0",
        "address": "0x7A9737CEf46630f32948842B96b50E4E477a0dc1",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000a0179860323b23d990e71f7ee006238d8720179"
        ],
        "data": "0x000000000000000000000000000000000000000000000003cb71f51fc5580000",
        "logIndex": 51,
        "blockHash": "0x1c40c5adce7f77afce74804ddc373145482d308995efa940ce7342a80d8e54a0"
      },
      {
        "transactionIndex": 53,
        "blockNumber": 8572731,
        "transactionHash": "0xec45f43b241838ba46e5fb8a8a4b05630b6fb0211c4b9feffef8bee9814a73b0",
        "address": "0x7A9737CEf46630f32948842B96b50E4E477a0dc1",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007a9737cef46630f32948842b96b50e4e477a0dc1"
        ],
        "data": "0x000000000000000000000000000000000000000000000003cb71f51fc5580000",
        "logIndex": 52,
        "blockHash": "0x1c40c5adce7f77afce74804ddc373145482d308995efa940ce7342a80d8e54a0"
      }
    ],
    "blockNumber": 8572731,
    "cumulativeGasUsed": "7823878",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "70000000000000000000",
    "ERECOIN",
    "ERE",
    "1000000000000000000000",
    "5000000",
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "bdce7801085820820dd2f766ab739ed4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"TokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"TokenSYM\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reawrd\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ContractFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewFund\",\"outputs\":[{\"internalType\":\"contract FundContract\",\"name\":\"Name\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ContractName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GoalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ContractName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FundingGoal\",\"type\":\"uint256\"}],\"name\":\"NewFundContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"_blockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_TokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_TokenSYM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFunding.sol\":\"CrowdFunding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2832d5ad210d6cd042dbc4b7cb70a0e6e4f937b02ad1975085267e7f16f2d781\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CrowdFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./FundContract.sol\\\";\\nimport \\\"./ERC20Token.sol\\\";\\n//0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\n\\ncontract CrowdFunding is ERC20Token{\\n    /* State Variables*/\\n    struct funding{\\n        FundContract Name;\\n        address ContractAddress;\\n        string ContractName;\\n        uint256 duration;\\n        uint256 GoalAmount;\\n    }\\n    uint256 public count=0;\\n    ERC20Token token;\\n    address public priceFeed;\\n\\n    // FundContract[] public NewFund;      //createing new fund contract \\n    funding[] public NewFund; \\n\\n    mapping(string => address) public ContractFund;\\n\\n\\n    constructor(uint256 initalSupply,\\n        string memory TokenName,\\n        string memory TokenSYM,\\n        uint256 cap,\\n        uint256 reawrd,\\n        address _priceFeed\\n        ) \\n\\n        ERC20Token(initalSupply,\\n        TokenName,\\n        TokenSYM,\\n        cap,\\n        reawrd){\\n            _mint(address(this),initalSupply);\\n            token = ERC20Token(TokenAddress);\\n            priceFeed=_priceFeed;\\n\\n    }\\n    function NewFundContract(\\n        string memory ContractName,\\n        uint value,\\n        uint256 _Duration,\\n        uint256 FundingGoal\\n        ) public OnlyOwner\\n            {\\n\\n                string memory name= ContractName;\\n                uint256 Duration=_Duration;\\n                new FundContract(\\n                    ContractName,\\n                    i_owner,\\n                    TokenAddress,\\n                    Duration,\\n                    priceFeed,\\n                    FundingGoal );\\n                NewFund.push(funding(new FundContract(\\n                            ContractName,\\n                            i_owner,\\n                            TokenAddress,\\n                            Duration,\\n                            priceFeed,\\n                            FundingGoal ),\\n                        address(new FundContract(\\n                            ContractName,\\n                            i_owner,\\n                            TokenAddress,\\n                            Duration,\\n                            priceFeed,\\n                            FundingGoal)),\\n                            ContractName,\\n                            _Duration,\\n                            FundingGoal\\n                            )\\n                            );\\n        ContractFund[name]= address(new FundContract(ContractName,i_owner,TokenAddress,Duration,priceFeed,FundingGoal));\\n        _transfer(address(this),address(NewFund[count].Name),value);\\n        count=count+1;\\n    }\\n}\\n\",\"keccak256\":\"0x8fee2b78bde08f2e14370802b60f2bc6d919fcd6b76a84ea1889b11a5d4ca443\",\"license\":\"MIT\"},\"contracts/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n\\ncontract ERC20Token is ERC20Capped , ERC20Burnable{\\n    /* State variables*/\\n    address  payable immutable i_owner;\\n    uint256 public immutable i_totalSupply;\\n    string public s_TokenName;\\n    string public s_TokenSYM;\\n    uint256 public  _cap;\\n    uint256 public blockReward;\\n    address public TokenAddress;\\n\\n    constructor(\\n        uint256 initalSupply,\\n        string memory TokenName,\\n        string memory TokenSYM,\\n        uint256 cap,\\n        uint256 reawrd\\n        ) \\n        ERC20(TokenName,TokenSYM) ERC20Capped(cap) {\\n        i_owner=payable(msg.sender);\\n        s_TokenName=TokenName;\\n        s_TokenSYM=TokenSYM;\\n        _cap=cap;\\n        blockReward=reawrd;\\n        i_totalSupply = initalSupply;\\n        _mint(msg.sender,initalSupply);\\n        TokenAddress=address(this);\\n    }\\n    \\n    function burn(uint256 amount) public virtual override OnlyOwner {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function _mintMinerRewards() internal{\\n        _mint(block.coinbase, blockReward);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 value) internal virtual override {\\n        if(from != address(0) && to != block.coinbase && to != address(0))\\n        {\\n            _mintMinerRewards();\\n        }\\n        super._beforeTokenTransfer(from,to,value);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual override (ERC20Capped,ERC20) {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n    \\n    function _blockReward(uint256 reward) public OnlyOwner{\\n        blockReward=reward;\\n    }\\n\\n    modifier OnlyOwner(){\\n        require(msg.sender==i_owner,\\\"Your not the Owner of the contract\\\");\\n        _;\\n    }\\n    \\n\\n}\",\"keccak256\":\"0x48b626310b318ea8baf9a54a1e9f762314581ab49ba9efcd178bf0a738a03ec1\",\"license\":\"MIT\"},\"contracts/FundContract.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"./ERC20Token.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n//0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\n\\nerror CantWithDraw();\\n\\ncontract FundContract{\\n\\n    string public ContractName;\\n    address public Owner;\\n    address public contractAddress;\\n    uint256 public erc20balance;\\n    address public con;\\n    uint256 public startTimestamp;\\n    uint256 public duration;\\n    uint256 public GoalAmount;\\n\\n    struct funder{\\n        address FunderAddress;\\n        uint256 FundingAmount;\\n    }\\n    funder[] public funding;\\n\\n    mapping(address=>uint256) public funderToAmount;\\n    mapping(address=>uint256) public funderToToken;\\n\\n    ERC20Token token;\\n    AggregatorV3Interface public priceFeed;\\n    constructor (\\n        string memory name,\\n        address _Owner,\\n        address _token,\\n        uint256 _duration,\\n        address _priceFeed,\\n        uint256 _GoalAmount\\n        // address contractAddress\\n        ) \\n        {\\n            ContractName=name;\\n            Owner=_Owner;\\n            token= ERC20Token(_token);\\n            con=_token;\\n            startTimestamp=block.timestamp;\\n            priceFeed= AggregatorV3Interface(_priceFeed);\\n            duration=_duration;\\n            GoalAmount=_GoalAmount;\\n        }\\n    function pay() public payable {\\n        require(block.timestamp - startTimestamp < duration,\\\"Time Over for the funding\\\");\\n        funding.push(funder(msg.sender,msg.value));\\n        token.transfer(msg.sender,calculateUSD(msg.value));\\n        funderToAmount[msg.sender]=msg.value;\\n        funderToToken[msg.sender]=calculateUSD(msg.value);\\n    }\\n    function erc20token() public{\\n        erc20balance = token.balanceOf(address(this));\\n    }\\n\\n\\n    function totalValue() public view returns(uint256){\\n        return address(this).balance;\\n    }\\n    function withdrawContractAmountOwner(uint256 amount) public {\\n        require(msg.sender==Owner, \\\"You Don't have Access to WithDraw\\\");\\n        require(block.timestamp - startTimestamp > duration && address(this).balance >= GoalAmount,\\\"Since Contract can't fullfill the goal, Funder money will be repayed\\\");\\n        payable(Owner).transfer(amount);\\n\\n    }\\n    function getLatestPrice() public view returns(uint256) {\\n         (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // return price;\\n        return uint256(price * 10000000000);\\n    }\\n    function calculateUSD(uint256 Amount) public returns(uint256){\\n        uint256 price= getLatestPrice();\\n        uint256 ethAmountInUsd = (price * Amount) / 1000000000000000000;\\n        return ethAmountInUsd;\\n    }\\n    function withdraw() public payable{\\n        if(block.timestamp - startTimestamp > duration && address(this).balance < GoalAmount){\\n            token.transfer(address(this),funderToAmount[msg.sender]);\\n           payable(msg.sender).transfer(funderToAmount[msg.sender]);\\n        } revert CantWithDraw();\\n    }\\n}\",\"keccak256\":\"0x5168dd98f7bb5c61df8afd793b28dffa6727702a69f1553ef87673dc4dda16ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600b553480156200001657600080fd5b50604051620055243803806200552483398181016040528101906200003c919062000757565b858585858581848481600390805190602001906200005c929190620005fb565b50806004908051906020019062000075929190620005fb565b50505060008111620000be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b590620008b7565b60405180910390fd5b80600581905550503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050836006908051906020019062000115929190620005fb565b5082600790805190602001906200012e929190620005fb565b5081600881905550806009819055508460a081815250506200015733866200025f60201b60201c565b30600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050620001af30876200025f60201b60201c565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000c48565b6200026f620002f060201b60201c565b8162000285620002fa60201b620006b01760201c565b620002919190620009aa565b1115620002d5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002cc90620008d9565b60405180910390fd5b620002ec82826200030460201b620013021760201c565b5050565b6000600554905090565b6000600254905090565b62000314620002f060201b60201c565b816200032a620002fa60201b620006b01760201c565b620003369190620009aa565b11156200037a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037190620008d9565b60405180910390fd5b6200039182826200039560201b620013771760201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000408576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003ff90620008fb565b60405180910390fd5b6200041c600083836200050360201b60201c565b8060026000828254620004309190620009aa565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620004e391906200091d565b60405180910390a3620004ff60008383620005db60201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156200056d57504173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015620005a75750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15620005be57620005bd620005e060201b60201c565b5b620005d6838383620005f660201b620014d91760201c565b505050565b505050565b620005f4416009546200025f60201b60201c565b565b505050565b828054620006099062000a7b565b90600052602060002090601f0160209004810192826200062d576000855562000679565b82601f106200064857805160ff191683800117855562000679565b8280016001018555821562000679579182015b82811115620006785782518255916020019190600101906200065b565b5b5090506200068891906200068c565b5090565b5b80821115620006a75760008160009055506001016200068d565b5090565b6000620006c2620006bc8462000963565b6200093a565b905082815260208101848484011115620006e157620006e062000b79565b5b620006ee84828562000a45565b509392505050565b600081519050620007078162000c14565b92915050565b600082601f83011262000725576200072462000b74565b5b815162000737848260208601620006ab565b91505092915050565b600081519050620007518162000c2e565b92915050565b60008060008060008060c0878903121562000777576200077662000b83565b5b60006200078789828a0162000740565b965050602087015167ffffffffffffffff811115620007ab57620007aa62000b7e565b5b620007b989828a016200070d565b955050604087015167ffffffffffffffff811115620007dd57620007dc62000b7e565b5b620007eb89828a016200070d565b9450506060620007fe89828a0162000740565b93505060806200081189828a0162000740565b92505060a06200082489828a01620006f6565b9150509295509295509295565b60006200084060158362000999565b91506200084d8262000b99565b602082019050919050565b60006200086760198362000999565b9150620008748262000bc2565b602082019050919050565b60006200088e601f8362000999565b91506200089b8262000beb565b602082019050919050565b620008b18162000a3b565b82525050565b60006020820190508181036000830152620008d28162000831565b9050919050565b60006020820190508181036000830152620008f48162000858565b9050919050565b6000602082019050818103600083015262000916816200087f565b9050919050565b6000602082019050620009346000830184620008a6565b92915050565b60006200094662000959565b905062000954828262000ab1565b919050565b6000604051905090565b600067ffffffffffffffff82111562000981576200098062000b45565b5b6200098c8262000b88565b9050602081019050919050565b600082825260208201905092915050565b6000620009b78262000a3b565b9150620009c48362000a3b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620009fc57620009fb62000ae7565b5b828201905092915050565b600062000a148262000a1b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101562000a6557808201518184015260208101905062000a48565b8381111562000a75576000848401525b50505050565b6000600282049050600182168062000a9457607f821691505b6020821081141562000aab5762000aaa62000b16565b5b50919050565b62000abc8262000b88565b810181811067ffffffffffffffff8211171562000ade5762000add62000b45565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332304361707065643a2063617020697320300000000000000000000000600082015250565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b62000c1f8162000a07565b811462000c2b57600080fd5b50565b62000c398162000a3b565b811462000c4557600080fd5b50565b60805160601c60a05161488962000c9b600039600061098601526000818161074301528181610ab301528181610b4f01528181610c0401528181610cc601528181610e8401526111e201526148896000f3fe60806040523480156200001157600080fd5b5060043610620001b45760003560e01c806370a0823111620000f3578063964bd3af11620000a5578063be1e4b1a116200007b578063be1e4b1a146200052b578063c2cba3061462000565578063c2f2f1661462000587578063dd62ed3e14620005a757620001b4565b8063964bd3af146200049f578063a457c2d714620004bf578063a9059cbb14620004f557620001b4565b806370a0823114620003ad578063741bef1a14620003e357806378d8049a146200040557806379cc6790146200042757806390e000ee146200044757806395d89b41146200047d57620001b4565b806323b872dd116200016b57806339509351116200014157806339509351146200031357806342966c68146200034957806352fb636a14620003695780636adce713146200038b57620001b4565b806323b872dd1462000299578063313ce56714620002cf578063355274ea14620002f157620001b4565b8063060cf4e814620001b957806306661abd14620001db57806306fdde0314620001fd578063095ea7b3146200021f5780630ac168a1146200025557806318160ddd1462000277575b600080fd5b620001c3620005dd565b604051620001d2919062002632565b60405180910390f35b620001e5620005e3565b604051620001f4919062002632565b60405180910390f35b62000207620005e9565b60405162000216919062002402565b60405180910390f35b6200023d600480360381019062000237919062001f3e565b62000683565b6040516200024c919062002381565b60405180910390f35b6200025f620006aa565b6040516200026e919062002632565b60405180910390f35b62000281620006b0565b60405162000290919062002632565b60405180910390f35b620002b76004803603810190620002b1919062001ee2565b620006ba565b604051620002c6919062002381565b60405180910390f35b620002d9620006ef565b604051620002e891906200264f565b60405180910390f35b620002fb620006f8565b6040516200030a919062002632565b60405180910390f35b6200033160048036038101906200032b919062001f3e565b62000702565b60405162000340919062002381565b60405180910390f35b62000367600480360381019062000361919062002067565b62000741565b005b62000373620007ea565b60405162000382919062002402565b60405180910390f35b6200039562000880565b604051620003a4919062002402565b60405180910390f35b620003cb6004803603810190620003c5919062001e69565b62000916565b604051620003da919062002632565b60405180910390f35b620003ed6200095e565b604051620003fc919062002364565b60405180910390f35b6200040f62000984565b6040516200041e919062002632565b60405180910390f35b6200044560048036038101906200043f919062001f3e565b620009a8565b005b6200046560048036038101906200045f919062001f85565b620009ce565b60405162000474919062002364565b60405180910390f35b6200048762000a17565b60405162000496919062002402565b60405180910390f35b620004bd6004803603810190620004b7919062001fd6565b62000ab1565b005b620004dd6004803603810190620004d7919062001f3e565b62000ffc565b604051620004ec919062002381565b60405180910390f35b6200051360048036038101906200050d919062001f3e565b6200107c565b60405162000522919062002381565b60405180910390f35b62000549600480360381019062000543919062002067565b620010a3565b6040516200055c9594939291906200239e565b60405180910390f35b6200056f620011ba565b6040516200057e919062002364565b60405180910390f35b620005a560048036038101906200059f919062002067565b620011e0565b005b620005c56004803603810190620005bf919062001e9b565b6200127b565b604051620005d4919062002632565b60405180910390f35b60085481565b600b5481565b606060038054620005fa906200283b565b80601f016020809104026020016040519081016040528092919081815260200182805462000628906200283b565b8015620006795780601f106200064d5761010080835404028352916020019162000679565b820191906000526020600020905b8154815290600101906020018083116200065b57829003601f168201915b5050505050905090565b60008062000690620014de565b90506200069f818585620014e6565b600191505092915050565b60095481565b6000600254905090565b600080620006c7620014de565b9050620006d6858285620016b9565b620006e38585856200174d565b60019150509392505050565b60006012905090565b6000600554905090565b6000806200070f620014de565b9050620007368185856200072485896200127b565b620007309190620026f2565b620014e6565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620007d2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007c99062002544565b60405180910390fd5b620007e7620007e0620014de565b82620019d4565b50565b60078054620007f9906200283b565b80601f016020809104026020016040519081016040528092919081815260200182805462000827906200283b565b8015620008785780601f106200084c5761010080835404028352916020019162000878565b820191906000526020600020905b8154815290600101906020018083116200085a57829003601f168201915b505050505081565b600680546200088f906200283b565b80601f0160208091040260200160405190810160405280929190818152602001828054620008bd906200283b565b80156200090e5780601f10620008e2576101008083540402835291602001916200090e565b820191906000526020600020905b815481529060010190602001808311620008f057829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b620009be82620009b7620014de565b83620016b9565b620009ca8282620019d4565b5050565b600f818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805462000a28906200283b565b80601f016020809104026020016040519081016040528092919081815260200182805462000a56906200283b565b801562000aa75780601f1062000a7b5761010080835404028352916020019162000aa7565b820191906000526020600020905b81548152906001019060200180831162000a8957829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000b42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b399062002544565b60405180910390fd5b60008490506000839050857f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405162000bc49062001cff565b62000bd59695949392919062002426565b604051809103906000f08015801562000bf2573d6000803e3d6000fd5b5050600e6040518060a00160405280887f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a60405162000c799062001cff565b62000c8a9695949392919062002426565b604051809103906000f08015801562000ca7573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff168152602001887f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a60405162000d3b9062001cff565b62000d4c9695949392919062002426565b604051809103906000f08015801562000d69573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff16815260200188815260200186815260200185815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019062000e6a92919062001d0d565b5060608201518160030155608082015181600401555050857f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405162000ef99062001cff565b62000f0a9695949392919062002426565b604051809103906000f08015801562000f27573d6000803e3d6000fd5b50600f8360405162000f3a91906200234b565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000fdd30600e600b548154811062000fa45762000fa362002905565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876200174d565b6001600b5462000fee9190620026f2565b600b81905550505050505050565b60008062001009620014de565b905060006200101982866200127b565b90508381101562001061576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200105890620025ee565b60405180910390fd5b620010708286868403620014e6565b60019250505092915050565b60008062001089620014de565b9050620010988185856200174d565b600191505092915050565b600e8181548110620010b457600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201805462001125906200283b565b80601f016020809104026020016040519081016040528092919081815260200182805462001153906200283b565b8015620011a45780601f106200117857610100808354040283529160200191620011a4565b820191906000526020600020905b8154815290600101906020018083116200118657829003601f168201915b5050505050908060030154908060040154905085565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001271576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012689062002544565b60405180910390fd5b8060098190555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6200130c620006f8565b8162001317620006b0565b620013239190620026f2565b111562001367576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200135e90620025aa565b60405180910390fd5b62001373828262001377565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620013ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013e19062002610565b60405180910390fd5b620013f86000838362001bae565b80600260008282546200140c9190620026f2565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620014bf919062002632565b60405180910390a3620014d56000838362001c75565b5050565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562001559576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200155090620025cc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620015cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015c390620024de565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051620016ac919062002632565b60405180910390a3505050565b6000620016c784846200127b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811462001747578181101562001737576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200172e9062002500565b60405180910390fd5b620017468484848403620014e6565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620017c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017b79062002588565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001833576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200182a906200249a565b60405180910390fd5b6200184083838362001bae565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015620018c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018c09062002522565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051620019b9919062002632565b60405180910390a3620019ce84848462001c75565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001a47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a3e9062002566565b60405180910390fd5b62001a558260008362001bae565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562001ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ad590620024bc565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405162001b93919062002632565b60405180910390a362001ba98360008462001c75565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801562001c1857504173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b801562001c525750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1562001c635762001c6262001c7a565b5b62001c70838383620014d9565b505050565b505050565b62001c884160095462001c8a565b565b62001c94620006f8565b8162001c9f620006b0565b62001cab9190620026f2565b111562001cef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ce690620025aa565b60405180910390fd5b62001cfb828262001302565b5050565b611b558062002cff83390190565b82805462001d1b906200283b565b90600052602060002090601f01602090048101928262001d3f576000855562001d8b565b82601f1062001d5a57805160ff191683800117855562001d8b565b8280016001018555821562001d8b579182015b8281111562001d8a57825182559160200191906001019062001d6d565b5b50905062001d9a919062001d9e565b5090565b5b8082111562001db957600081600090555060010162001d9f565b5090565b600062001dd462001dce8462002695565b6200266c565b90508281526020810184848401111562001df35762001df262002968565b5b62001e00848285620027f6565b509392505050565b60008135905062001e198162002cca565b92915050565b600082601f83011262001e375762001e3662002963565b5b813562001e4984826020860162001dbd565b91505092915050565b60008135905062001e638162002ce4565b92915050565b60006020828403121562001e825762001e8162002972565b5b600062001e928482850162001e08565b91505092915050565b6000806040838503121562001eb55762001eb462002972565b5b600062001ec58582860162001e08565b925050602062001ed88582860162001e08565b9150509250929050565b60008060006060848603121562001efe5762001efd62002972565b5b600062001f0e8682870162001e08565b935050602062001f218682870162001e08565b925050604062001f348682870162001e52565b9150509250925092565b6000806040838503121562001f585762001f5762002972565b5b600062001f688582860162001e08565b925050602062001f7b8582860162001e52565b9150509250929050565b60006020828403121562001f9e5762001f9d62002972565b5b600082013567ffffffffffffffff81111562001fbf5762001fbe6200296d565b5b62001fcd8482850162001e1f565b91505092915050565b6000806000806080858703121562001ff35762001ff262002972565b5b600085013567ffffffffffffffff8111156200201457620020136200296d565b5b620020228782880162001e1f565b9450506020620020358782880162001e52565b9350506040620020488782880162001e52565b92505060606200205b8782880162001e52565b91505092959194509250565b60006020828403121562002080576200207f62002972565b5b6000620020908482850162001e52565b91505092915050565b620020a481620027a6565b82525050565b620020b5816200274f565b82525050565b620020c68162002763565b82525050565b620020d781620027ba565b82525050565b6000620020ea82620026cb565b620020f68185620026d6565b93506200210881856020860162002805565b620021138162002977565b840191505092915050565b60006200212b82620026cb565b620021378185620026e7565b93506200214981856020860162002805565b80840191505092915050565b600062002164602383620026d6565b9150620021718262002988565b604082019050919050565b60006200218b602283620026d6565b91506200219882620029d7565b604082019050919050565b6000620021b2602283620026d6565b9150620021bf8262002a26565b604082019050919050565b6000620021d9601d83620026d6565b9150620021e68262002a75565b602082019050919050565b600062002200602683620026d6565b91506200220d8262002a9e565b604082019050919050565b600062002227602283620026d6565b9150620022348262002aed565b604082019050919050565b60006200224e602183620026d6565b91506200225b8262002b3c565b604082019050919050565b600062002275602583620026d6565b9150620022828262002b8b565b604082019050919050565b60006200229c601983620026d6565b9150620022a98262002bda565b602082019050919050565b6000620022c3602483620026d6565b9150620022d08262002c03565b604082019050919050565b6000620022ea602583620026d6565b9150620022f78262002c52565b604082019050919050565b600062002311601f83620026d6565b91506200231e8262002ca1565b602082019050919050565b62002334816200278f565b82525050565b620023458162002799565b82525050565b60006200235982846200211e565b915081905092915050565b60006020820190506200237b6000830184620020aa565b92915050565b6000602082019050620023986000830184620020bb565b92915050565b600060a082019050620023b56000830188620020cc565b620023c46020830187620020aa565b8181036040830152620023d88186620020dd565b9050620023e9606083018562002329565b620023f8608083018462002329565b9695505050505050565b600060208201905081810360008301526200241e8184620020dd565b905092915050565b600060c0820190508181036000830152620024428189620020dd565b905062002453602083018862002099565b620024626040830187620020aa565b62002471606083018662002329565b620024806080830185620020aa565b6200248f60a083018462002329565b979650505050505050565b60006020820190508181036000830152620024b58162002155565b9050919050565b60006020820190508181036000830152620024d7816200217c565b9050919050565b60006020820190508181036000830152620024f981620021a3565b9050919050565b600060208201905081810360008301526200251b81620021ca565b9050919050565b600060208201905081810360008301526200253d81620021f1565b9050919050565b600060208201905081810360008301526200255f8162002218565b9050919050565b6000602082019050818103600083015262002581816200223f565b9050919050565b60006020820190508181036000830152620025a38162002266565b9050919050565b60006020820190508181036000830152620025c5816200228d565b9050919050565b60006020820190508181036000830152620025e781620022b4565b9050919050565b600060208201905081810360008301526200260981620022db565b9050919050565b600060208201905081810360008301526200262b8162002302565b9050919050565b600060208201905062002649600083018462002329565b92915050565b60006020820190506200266660008301846200233a565b92915050565b6000620026786200268b565b905062002686828262002871565b919050565b6000604051905090565b600067ffffffffffffffff821115620026b357620026b262002934565b5b620026be8262002977565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000620026ff826200278f565b91506200270c836200278f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620027445762002743620028a7565b5b828201905092915050565b60006200275c826200276f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000620027b382620027ce565b9050919050565b6000620027c782620027ce565b9050919050565b6000620027db82620027e2565b9050919050565b6000620027ef826200276f565b9050919050565b82818337600083830152505050565b60005b838110156200282557808201518184015260208101905062002808565b8381111562002835576000848401525b50505050565b600060028204905060018216806200285457607f821691505b602082108114156200286b576200286a620028d6565b5b50919050565b6200287c8262002977565b810181811067ffffffffffffffff821117156200289e576200289d62002934565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f596f7572206e6f7420746865204f776e6572206f662074686520636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b62002cd5816200274f565b811462002ce157600080fd5b50565b62002cef816200278f565b811462002cfb57600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001b5538038062001b558339818101604052810190620000379190620002d1565b85600090805190602001906200004f92919062000175565b5084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260058190555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826006819055508060078190555050505050505062000582565b82805462000183906200045f565b90600052602060002090601f016020900481019282620001a75760008555620001f3565b82601f10620001c257805160ff1916838001178555620001f3565b82800160010185558215620001f3579182015b82811115620001f2578251825591602001919060010190620001d5565b5b50905062000202919062000206565b5090565b5b808211156200022157600081600090555060010162000207565b5090565b60006200023c6200023684620003b5565b6200038c565b9050828152602081018484840111156200025b576200025a6200052e565b5b6200026884828562000429565b509392505050565b60008151905062000281816200054e565b92915050565b600082601f8301126200029f576200029e62000529565b5b8151620002b184826020860162000225565b91505092915050565b600081519050620002cb8162000568565b92915050565b60008060008060008060c08789031215620002f157620002f062000538565b5b600087015167ffffffffffffffff81111562000312576200031162000533565b5b6200032089828a0162000287565b96505060206200033389828a0162000270565b95505060406200034689828a0162000270565b94505060606200035989828a01620002ba565b93505060806200036c89828a0162000270565b92505060a06200037f89828a01620002ba565b9150509295509295509295565b600062000398620003ab565b9050620003a6828262000495565b919050565b6000604051905090565b600067ffffffffffffffff821115620003d357620003d2620004fa565b5b620003de826200053d565b9050602081019050919050565b6000620003f882620003ff565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620004495780820151818401526020810190506200042c565b8381111562000459576000848401525b50505050565b600060028204905060018216806200047857607f821691505b602082108114156200048f576200048e620004cb565b5b50919050565b620004a0826200053d565b810181811067ffffffffffffffff82111715620004c257620004c1620004fa565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200055981620003eb565b81146200056557600080fd5b50565b62000573816200041f565b81146200057f57600080fd5b50565b6115c380620005926000396000f3fe6080604052600436106101145760003560e01c80638e0f914c116100a0578063d4c3eea011610064578063d4c3eea014610352578063e6fd48bc1461037d578063ef2e2740146103a8578063f6b4dfb4146103e5578063fd79c2a91461041057610114565b80638e0f914c146102565780638e15f4731461028157806392ca60c1146102ac578063b4a99a4e146102ea578063bc8fcb221461031557610114565b80631dcea427116100e75780631dcea427146101a25780633ccfd60b146101b95780634407e1e8146101c357806344ab323b14610200578063741bef1a1461022b57610114565b80630b2cb3bc146101195780630fb5a6b414610144578063192c6ec51461016f5780631b9265b814610198575b600080fd5b34801561012557600080fd5b5061012e61043b565b60405161013b9190610f99565b60405180910390f35b34801561015057600080fd5b50610159610461565b604051610166919061107a565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190610df5565b610467565b005b6101a06105c2565b005b3480156101ae57600080fd5b506101b7610806565b005b6101c16108b9565b005b3480156101cf57600080fd5b506101ea60048036038101906101e59190610d9b565b610a85565b6040516101f7919061107a565b60405180910390f35b34801561020c57600080fd5b50610215610a9d565b604051610222919061107a565b60405180910390f35b34801561023757600080fd5b50610240610aa3565b60405161024d9190610fdd565b60405180910390f35b34801561026257600080fd5b5061026b610ac9565b604051610278919061107a565b60405180910390f35b34801561028d57600080fd5b50610296610acf565b6040516102a3919061107a565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190610df5565b610b8f565b6040516102e1929190610fb4565b60405180910390f35b3480156102f657600080fd5b506102ff610be3565b60405161030c9190610f99565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190610d9b565b610c09565b604051610349919061107a565b60405180910390f35b34801561035e57600080fd5b50610367610c21565b604051610374919061107a565b60405180910390f35b34801561038957600080fd5b50610392610c29565b60405161039f919061107a565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca9190610df5565b610c2f565b6040516103dc919061107a565b60405180910390f35b3480156103f157600080fd5b506103fa610c69565b6040516104079190610f99565b60405180910390f35b34801561041c57600080fd5b50610425610c8f565b6040516104329190610ff8565b60405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee9061105a565b60405180910390fd5b600654600554426105089190611253565b11801561051757506007544710155b610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d9061101a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105be573d6000803e3d6000fd5b5050565b600654600554426105d39190611253565b10610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061103a565b60405180910390fd5b600860405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200134815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3361070434610c2f565b6040518363ffffffff1660e01b8152600401610721929190610fb4565b602060405180830381600087803b15801561073b57600080fd5b505af115801561074f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107739190610dc8565b5034600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107c134610c2f565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108619190610f99565b60206040518083038186803b15801561087957600080fd5b505afa15801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190610e22565b600381905550565b600654600554426108ca9190611253565b1180156108d8575060075447105b15610a5357600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b8152600401610979929190610fb4565b602060405180830381600087803b15801561099357600080fd5b505af11580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb9190610dc8565b503373ffffffffffffffffffffffffffffffffffffffff166108fc600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610a51573d6000803e3d6000fd5b505b6040517fcedc3d6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60096020528060005260406000206000915090505481565b60075481565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190610e4f565b5050509150506402540be40081610b8991906110e2565b91505090565b60088181548110610b9f57600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a6020528060005260406000206000915090505481565b600047905090565b60055481565b600080610c3a610acf565b90506000670de0b6b3a76400008483610c5391906111f9565b610c5d91906110b1565b90508092505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054610c9c90611358565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc890611358565b8015610d155780601f10610cea57610100808354040283529160200191610d15565b820191906000526020600020905b815481529060010190602001808311610cf857829003601f168201915b505050505081565b600081359050610d2c8161151a565b92915050565b600081519050610d4181611531565b92915050565b600081519050610d5681611548565b92915050565b600081359050610d6b8161155f565b92915050565b600081519050610d808161155f565b92915050565b600081519050610d9581611576565b92915050565b600060208284031215610db157610db0611417565b5b6000610dbf84828501610d1d565b91505092915050565b600060208284031215610dde57610ddd611417565b5b6000610dec84828501610d32565b91505092915050565b600060208284031215610e0b57610e0a611417565b5b6000610e1984828501610d5c565b91505092915050565b600060208284031215610e3857610e37611417565b5b6000610e4684828501610d71565b91505092915050565b600080600080600060a08688031215610e6b57610e6a611417565b5b6000610e7988828901610d86565b9550506020610e8a88828901610d47565b9450506040610e9b88828901610d71565b9350506060610eac88828901610d71565b9250506080610ebd88828901610d86565b9150509295509295909350565b610ed381611287565b82525050565b610ee2816112ef565b82525050565b6000610ef382611095565b610efd81856110a0565b9350610f0d818560208601611325565b610f168161141c565b840191505092915050565b6000610f2e6044836110a0565b9150610f398261142d565b606082019050919050565b6000610f516019836110a0565b9150610f5c826114a2565b602082019050919050565b6000610f746021836110a0565b9150610f7f826114cb565b604082019050919050565b610f93816112cf565b82525050565b6000602082019050610fae6000830184610eca565b92915050565b6000604082019050610fc96000830185610eca565b610fd66020830184610f8a565b9392505050565b6000602082019050610ff26000830184610ed9565b92915050565b600060208201905081810360008301526110128184610ee8565b905092915050565b6000602082019050818103600083015261103381610f21565b9050919050565b6000602082019050818103600083015261105381610f44565b9050919050565b6000602082019050818103600083015261107381610f67565b9050919050565b600060208201905061108f6000830184610f8a565b92915050565b600081519050919050565b600082825260208201905092915050565b60006110bc826112cf565b91506110c7836112cf565b9250826110d7576110d66113b9565b5b828204905092915050565b60006110ed826112a5565b91506110f8836112a5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111375761113661138a565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111745761117361138a565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111b1576111b061138a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111ee576111ed61138a565b5b828202905092915050565b6000611204826112cf565b915061120f836112cf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112485761124761138a565b5b828202905092915050565b600061125e826112cf565b9150611269836112cf565b92508282101561127c5761127b61138a565b5b828203905092915050565b6000611292826112af565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006112fa82611301565b9050919050565b600061130c82611313565b9050919050565b600061131e826112af565b9050919050565b60005b83811015611343578082015181840152602081019050611328565b83811115611352576000848401525b50505050565b6000600282049050600182168061137057607f821691505b60208210811415611384576113836113e8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f53696e636520436f6e74726163742063616e27742066756c6c66696c6c20746860008201527f6520676f616c2c2046756e646572206d6f6e65792077696c6c2062652072657060208201527f6179656400000000000000000000000000000000000000000000000000000000604082015250565b7f54696d65204f76657220666f72207468652066756e64696e6700000000000000600082015250565b7f596f7520446f6e277420686176652041636365737320746f205769746844726160008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b61152381611287565b811461152e57600080fd5b50565b61153a81611299565b811461154557600080fd5b50565b611551816112a5565b811461155c57600080fd5b50565b611568816112cf565b811461157357600080fd5b50565b61157f816112d9565b811461158a57600080fd5b5056fea26469706673582212201f48fb9281e13db53ca4bed344f6c8c5db1735d8ebe8bba24b416eeea7fdd90f64736f6c63430008070033a26469706673582212203d8b8845e32c06c0889023e2e32eb333708ef41d7dfaf04392287a970dfdef3164736f6c63430008070033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001b45760003560e01c806370a0823111620000f3578063964bd3af11620000a5578063be1e4b1a116200007b578063be1e4b1a146200052b578063c2cba3061462000565578063c2f2f1661462000587578063dd62ed3e14620005a757620001b4565b8063964bd3af146200049f578063a457c2d714620004bf578063a9059cbb14620004f557620001b4565b806370a0823114620003ad578063741bef1a14620003e357806378d8049a146200040557806379cc6790146200042757806390e000ee146200044757806395d89b41146200047d57620001b4565b806323b872dd116200016b57806339509351116200014157806339509351146200031357806342966c68146200034957806352fb636a14620003695780636adce713146200038b57620001b4565b806323b872dd1462000299578063313ce56714620002cf578063355274ea14620002f157620001b4565b8063060cf4e814620001b957806306661abd14620001db57806306fdde0314620001fd578063095ea7b3146200021f5780630ac168a1146200025557806318160ddd1462000277575b600080fd5b620001c3620005dd565b604051620001d2919062002632565b60405180910390f35b620001e5620005e3565b604051620001f4919062002632565b60405180910390f35b62000207620005e9565b60405162000216919062002402565b60405180910390f35b6200023d600480360381019062000237919062001f3e565b62000683565b6040516200024c919062002381565b60405180910390f35b6200025f620006aa565b6040516200026e919062002632565b60405180910390f35b62000281620006b0565b60405162000290919062002632565b60405180910390f35b620002b76004803603810190620002b1919062001ee2565b620006ba565b604051620002c6919062002381565b60405180910390f35b620002d9620006ef565b604051620002e891906200264f565b60405180910390f35b620002fb620006f8565b6040516200030a919062002632565b60405180910390f35b6200033160048036038101906200032b919062001f3e565b62000702565b60405162000340919062002381565b60405180910390f35b62000367600480360381019062000361919062002067565b62000741565b005b62000373620007ea565b60405162000382919062002402565b60405180910390f35b6200039562000880565b604051620003a4919062002402565b60405180910390f35b620003cb6004803603810190620003c5919062001e69565b62000916565b604051620003da919062002632565b60405180910390f35b620003ed6200095e565b604051620003fc919062002364565b60405180910390f35b6200040f62000984565b6040516200041e919062002632565b60405180910390f35b6200044560048036038101906200043f919062001f3e565b620009a8565b005b6200046560048036038101906200045f919062001f85565b620009ce565b60405162000474919062002364565b60405180910390f35b6200048762000a17565b60405162000496919062002402565b60405180910390f35b620004bd6004803603810190620004b7919062001fd6565b62000ab1565b005b620004dd6004803603810190620004d7919062001f3e565b62000ffc565b604051620004ec919062002381565b60405180910390f35b6200051360048036038101906200050d919062001f3e565b6200107c565b60405162000522919062002381565b60405180910390f35b62000549600480360381019062000543919062002067565b620010a3565b6040516200055c9594939291906200239e565b60405180910390f35b6200056f620011ba565b6040516200057e919062002364565b60405180910390f35b620005a560048036038101906200059f919062002067565b620011e0565b005b620005c56004803603810190620005bf919062001e9b565b6200127b565b604051620005d4919062002632565b60405180910390f35b60085481565b600b5481565b606060038054620005fa906200283b565b80601f016020809104026020016040519081016040528092919081815260200182805462000628906200283b565b8015620006795780601f106200064d5761010080835404028352916020019162000679565b820191906000526020600020905b8154815290600101906020018083116200065b57829003601f168201915b5050505050905090565b60008062000690620014de565b90506200069f818585620014e6565b600191505092915050565b60095481565b6000600254905090565b600080620006c7620014de565b9050620006d6858285620016b9565b620006e38585856200174d565b60019150509392505050565b60006012905090565b6000600554905090565b6000806200070f620014de565b9050620007368185856200072485896200127b565b620007309190620026f2565b620014e6565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620007d2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007c99062002544565b60405180910390fd5b620007e7620007e0620014de565b82620019d4565b50565b60078054620007f9906200283b565b80601f016020809104026020016040519081016040528092919081815260200182805462000827906200283b565b8015620008785780601f106200084c5761010080835404028352916020019162000878565b820191906000526020600020905b8154815290600101906020018083116200085a57829003601f168201915b505050505081565b600680546200088f906200283b565b80601f0160208091040260200160405190810160405280929190818152602001828054620008bd906200283b565b80156200090e5780601f10620008e2576101008083540402835291602001916200090e565b820191906000526020600020905b815481529060010190602001808311620008f057829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b620009be82620009b7620014de565b83620016b9565b620009ca8282620019d4565b5050565b600f818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805462000a28906200283b565b80601f016020809104026020016040519081016040528092919081815260200182805462000a56906200283b565b801562000aa75780601f1062000a7b5761010080835404028352916020019162000aa7565b820191906000526020600020905b81548152906001019060200180831162000a8957829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000b42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b399062002544565b60405180910390fd5b60008490506000839050857f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405162000bc49062001cff565b62000bd59695949392919062002426565b604051809103906000f08015801562000bf2573d6000803e3d6000fd5b5050600e6040518060a00160405280887f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a60405162000c799062001cff565b62000c8a9695949392919062002426565b604051809103906000f08015801562000ca7573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff168152602001887f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a60405162000d3b9062001cff565b62000d4c9695949392919062002426565b604051809103906000f08015801562000d69573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff16815260200188815260200186815260200185815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019062000e6a92919062001d0d565b5060608201518160030155608082015181600401555050857f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405162000ef99062001cff565b62000f0a9695949392919062002426565b604051809103906000f08015801562000f27573d6000803e3d6000fd5b50600f8360405162000f3a91906200234b565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000fdd30600e600b548154811062000fa45762000fa362002905565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876200174d565b6001600b5462000fee9190620026f2565b600b81905550505050505050565b60008062001009620014de565b905060006200101982866200127b565b90508381101562001061576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200105890620025ee565b60405180910390fd5b620010708286868403620014e6565b60019250505092915050565b60008062001089620014de565b9050620010988185856200174d565b600191505092915050565b600e8181548110620010b457600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201805462001125906200283b565b80601f016020809104026020016040519081016040528092919081815260200182805462001153906200283b565b8015620011a45780601f106200117857610100808354040283529160200191620011a4565b820191906000526020600020905b8154815290600101906020018083116200118657829003601f168201915b5050505050908060030154908060040154905085565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001271576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012689062002544565b60405180910390fd5b8060098190555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6200130c620006f8565b8162001317620006b0565b620013239190620026f2565b111562001367576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200135e90620025aa565b60405180910390fd5b62001373828262001377565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620013ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013e19062002610565b60405180910390fd5b620013f86000838362001bae565b80600260008282546200140c9190620026f2565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620014bf919062002632565b60405180910390a3620014d56000838362001c75565b5050565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562001559576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200155090620025cc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620015cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015c390620024de565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051620016ac919062002632565b60405180910390a3505050565b6000620016c784846200127b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811462001747578181101562001737576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200172e9062002500565b60405180910390fd5b620017468484848403620014e6565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620017c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017b79062002588565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001833576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200182a906200249a565b60405180910390fd5b6200184083838362001bae565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015620018c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018c09062002522565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051620019b9919062002632565b60405180910390a3620019ce84848462001c75565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001a47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a3e9062002566565b60405180910390fd5b62001a558260008362001bae565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562001ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ad590620024bc565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405162001b93919062002632565b60405180910390a362001ba98360008462001c75565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801562001c1857504173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b801562001c525750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1562001c635762001c6262001c7a565b5b62001c70838383620014d9565b505050565b505050565b62001c884160095462001c8a565b565b62001c94620006f8565b8162001c9f620006b0565b62001cab9190620026f2565b111562001cef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ce690620025aa565b60405180910390fd5b62001cfb828262001302565b5050565b611b558062002cff83390190565b82805462001d1b906200283b565b90600052602060002090601f01602090048101928262001d3f576000855562001d8b565b82601f1062001d5a57805160ff191683800117855562001d8b565b8280016001018555821562001d8b579182015b8281111562001d8a57825182559160200191906001019062001d6d565b5b50905062001d9a919062001d9e565b5090565b5b8082111562001db957600081600090555060010162001d9f565b5090565b600062001dd462001dce8462002695565b6200266c565b90508281526020810184848401111562001df35762001df262002968565b5b62001e00848285620027f6565b509392505050565b60008135905062001e198162002cca565b92915050565b600082601f83011262001e375762001e3662002963565b5b813562001e4984826020860162001dbd565b91505092915050565b60008135905062001e638162002ce4565b92915050565b60006020828403121562001e825762001e8162002972565b5b600062001e928482850162001e08565b91505092915050565b6000806040838503121562001eb55762001eb462002972565b5b600062001ec58582860162001e08565b925050602062001ed88582860162001e08565b9150509250929050565b60008060006060848603121562001efe5762001efd62002972565b5b600062001f0e8682870162001e08565b935050602062001f218682870162001e08565b925050604062001f348682870162001e52565b9150509250925092565b6000806040838503121562001f585762001f5762002972565b5b600062001f688582860162001e08565b925050602062001f7b8582860162001e52565b9150509250929050565b60006020828403121562001f9e5762001f9d62002972565b5b600082013567ffffffffffffffff81111562001fbf5762001fbe6200296d565b5b62001fcd8482850162001e1f565b91505092915050565b6000806000806080858703121562001ff35762001ff262002972565b5b600085013567ffffffffffffffff8111156200201457620020136200296d565b5b620020228782880162001e1f565b9450506020620020358782880162001e52565b9350506040620020488782880162001e52565b92505060606200205b8782880162001e52565b91505092959194509250565b60006020828403121562002080576200207f62002972565b5b6000620020908482850162001e52565b91505092915050565b620020a481620027a6565b82525050565b620020b5816200274f565b82525050565b620020c68162002763565b82525050565b620020d781620027ba565b82525050565b6000620020ea82620026cb565b620020f68185620026d6565b93506200210881856020860162002805565b620021138162002977565b840191505092915050565b60006200212b82620026cb565b620021378185620026e7565b93506200214981856020860162002805565b80840191505092915050565b600062002164602383620026d6565b9150620021718262002988565b604082019050919050565b60006200218b602283620026d6565b91506200219882620029d7565b604082019050919050565b6000620021b2602283620026d6565b9150620021bf8262002a26565b604082019050919050565b6000620021d9601d83620026d6565b9150620021e68262002a75565b602082019050919050565b600062002200602683620026d6565b91506200220d8262002a9e565b604082019050919050565b600062002227602283620026d6565b9150620022348262002aed565b604082019050919050565b60006200224e602183620026d6565b91506200225b8262002b3c565b604082019050919050565b600062002275602583620026d6565b9150620022828262002b8b565b604082019050919050565b60006200229c601983620026d6565b9150620022a98262002bda565b602082019050919050565b6000620022c3602483620026d6565b9150620022d08262002c03565b604082019050919050565b6000620022ea602583620026d6565b9150620022f78262002c52565b604082019050919050565b600062002311601f83620026d6565b91506200231e8262002ca1565b602082019050919050565b62002334816200278f565b82525050565b620023458162002799565b82525050565b60006200235982846200211e565b915081905092915050565b60006020820190506200237b6000830184620020aa565b92915050565b6000602082019050620023986000830184620020bb565b92915050565b600060a082019050620023b56000830188620020cc565b620023c46020830187620020aa565b8181036040830152620023d88186620020dd565b9050620023e9606083018562002329565b620023f8608083018462002329565b9695505050505050565b600060208201905081810360008301526200241e8184620020dd565b905092915050565b600060c0820190508181036000830152620024428189620020dd565b905062002453602083018862002099565b620024626040830187620020aa565b62002471606083018662002329565b620024806080830185620020aa565b6200248f60a083018462002329565b979650505050505050565b60006020820190508181036000830152620024b58162002155565b9050919050565b60006020820190508181036000830152620024d7816200217c565b9050919050565b60006020820190508181036000830152620024f981620021a3565b9050919050565b600060208201905081810360008301526200251b81620021ca565b9050919050565b600060208201905081810360008301526200253d81620021f1565b9050919050565b600060208201905081810360008301526200255f8162002218565b9050919050565b6000602082019050818103600083015262002581816200223f565b9050919050565b60006020820190508181036000830152620025a38162002266565b9050919050565b60006020820190508181036000830152620025c5816200228d565b9050919050565b60006020820190508181036000830152620025e781620022b4565b9050919050565b600060208201905081810360008301526200260981620022db565b9050919050565b600060208201905081810360008301526200262b8162002302565b9050919050565b600060208201905062002649600083018462002329565b92915050565b60006020820190506200266660008301846200233a565b92915050565b6000620026786200268b565b905062002686828262002871565b919050565b6000604051905090565b600067ffffffffffffffff821115620026b357620026b262002934565b5b620026be8262002977565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000620026ff826200278f565b91506200270c836200278f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620027445762002743620028a7565b5b828201905092915050565b60006200275c826200276f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000620027b382620027ce565b9050919050565b6000620027c782620027ce565b9050919050565b6000620027db82620027e2565b9050919050565b6000620027ef826200276f565b9050919050565b82818337600083830152505050565b60005b838110156200282557808201518184015260208101905062002808565b8381111562002835576000848401525b50505050565b600060028204905060018216806200285457607f821691505b602082108114156200286b576200286a620028d6565b5b50919050565b6200287c8262002977565b810181811067ffffffffffffffff821117156200289e576200289d62002934565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f596f7572206e6f7420746865204f776e6572206f662074686520636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b62002cd5816200274f565b811462002ce157600080fd5b50565b62002cef816200278f565b811462002cfb57600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001b5538038062001b558339818101604052810190620000379190620002d1565b85600090805190602001906200004f92919062000175565b5084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260058190555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826006819055508060078190555050505050505062000582565b82805462000183906200045f565b90600052602060002090601f016020900481019282620001a75760008555620001f3565b82601f10620001c257805160ff1916838001178555620001f3565b82800160010185558215620001f3579182015b82811115620001f2578251825591602001919060010190620001d5565b5b50905062000202919062000206565b5090565b5b808211156200022157600081600090555060010162000207565b5090565b60006200023c6200023684620003b5565b6200038c565b9050828152602081018484840111156200025b576200025a6200052e565b5b6200026884828562000429565b509392505050565b60008151905062000281816200054e565b92915050565b600082601f8301126200029f576200029e62000529565b5b8151620002b184826020860162000225565b91505092915050565b600081519050620002cb8162000568565b92915050565b60008060008060008060c08789031215620002f157620002f062000538565b5b600087015167ffffffffffffffff81111562000312576200031162000533565b5b6200032089828a0162000287565b96505060206200033389828a0162000270565b95505060406200034689828a0162000270565b94505060606200035989828a01620002ba565b93505060806200036c89828a0162000270565b92505060a06200037f89828a01620002ba565b9150509295509295509295565b600062000398620003ab565b9050620003a6828262000495565b919050565b6000604051905090565b600067ffffffffffffffff821115620003d357620003d2620004fa565b5b620003de826200053d565b9050602081019050919050565b6000620003f882620003ff565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620004495780820151818401526020810190506200042c565b8381111562000459576000848401525b50505050565b600060028204905060018216806200047857607f821691505b602082108114156200048f576200048e620004cb565b5b50919050565b620004a0826200053d565b810181811067ffffffffffffffff82111715620004c257620004c1620004fa565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200055981620003eb565b81146200056557600080fd5b50565b62000573816200041f565b81146200057f57600080fd5b50565b6115c380620005926000396000f3fe6080604052600436106101145760003560e01c80638e0f914c116100a0578063d4c3eea011610064578063d4c3eea014610352578063e6fd48bc1461037d578063ef2e2740146103a8578063f6b4dfb4146103e5578063fd79c2a91461041057610114565b80638e0f914c146102565780638e15f4731461028157806392ca60c1146102ac578063b4a99a4e146102ea578063bc8fcb221461031557610114565b80631dcea427116100e75780631dcea427146101a25780633ccfd60b146101b95780634407e1e8146101c357806344ab323b14610200578063741bef1a1461022b57610114565b80630b2cb3bc146101195780630fb5a6b414610144578063192c6ec51461016f5780631b9265b814610198575b600080fd5b34801561012557600080fd5b5061012e61043b565b60405161013b9190610f99565b60405180910390f35b34801561015057600080fd5b50610159610461565b604051610166919061107a565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190610df5565b610467565b005b6101a06105c2565b005b3480156101ae57600080fd5b506101b7610806565b005b6101c16108b9565b005b3480156101cf57600080fd5b506101ea60048036038101906101e59190610d9b565b610a85565b6040516101f7919061107a565b60405180910390f35b34801561020c57600080fd5b50610215610a9d565b604051610222919061107a565b60405180910390f35b34801561023757600080fd5b50610240610aa3565b60405161024d9190610fdd565b60405180910390f35b34801561026257600080fd5b5061026b610ac9565b604051610278919061107a565b60405180910390f35b34801561028d57600080fd5b50610296610acf565b6040516102a3919061107a565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190610df5565b610b8f565b6040516102e1929190610fb4565b60405180910390f35b3480156102f657600080fd5b506102ff610be3565b60405161030c9190610f99565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190610d9b565b610c09565b604051610349919061107a565b60405180910390f35b34801561035e57600080fd5b50610367610c21565b604051610374919061107a565b60405180910390f35b34801561038957600080fd5b50610392610c29565b60405161039f919061107a565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca9190610df5565b610c2f565b6040516103dc919061107a565b60405180910390f35b3480156103f157600080fd5b506103fa610c69565b6040516104079190610f99565b60405180910390f35b34801561041c57600080fd5b50610425610c8f565b6040516104329190610ff8565b60405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee9061105a565b60405180910390fd5b600654600554426105089190611253565b11801561051757506007544710155b610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d9061101a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105be573d6000803e3d6000fd5b5050565b600654600554426105d39190611253565b10610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061103a565b60405180910390fd5b600860405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200134815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3361070434610c2f565b6040518363ffffffff1660e01b8152600401610721929190610fb4565b602060405180830381600087803b15801561073b57600080fd5b505af115801561074f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107739190610dc8565b5034600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107c134610c2f565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108619190610f99565b60206040518083038186803b15801561087957600080fd5b505afa15801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190610e22565b600381905550565b600654600554426108ca9190611253565b1180156108d8575060075447105b15610a5357600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b8152600401610979929190610fb4565b602060405180830381600087803b15801561099357600080fd5b505af11580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb9190610dc8565b503373ffffffffffffffffffffffffffffffffffffffff166108fc600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610a51573d6000803e3d6000fd5b505b6040517fcedc3d6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60096020528060005260406000206000915090505481565b60075481565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190610e4f565b5050509150506402540be40081610b8991906110e2565b91505090565b60088181548110610b9f57600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a6020528060005260406000206000915090505481565b600047905090565b60055481565b600080610c3a610acf565b90506000670de0b6b3a76400008483610c5391906111f9565b610c5d91906110b1565b90508092505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054610c9c90611358565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc890611358565b8015610d155780601f10610cea57610100808354040283529160200191610d15565b820191906000526020600020905b815481529060010190602001808311610cf857829003601f168201915b505050505081565b600081359050610d2c8161151a565b92915050565b600081519050610d4181611531565b92915050565b600081519050610d5681611548565b92915050565b600081359050610d6b8161155f565b92915050565b600081519050610d808161155f565b92915050565b600081519050610d9581611576565b92915050565b600060208284031215610db157610db0611417565b5b6000610dbf84828501610d1d565b91505092915050565b600060208284031215610dde57610ddd611417565b5b6000610dec84828501610d32565b91505092915050565b600060208284031215610e0b57610e0a611417565b5b6000610e1984828501610d5c565b91505092915050565b600060208284031215610e3857610e37611417565b5b6000610e4684828501610d71565b91505092915050565b600080600080600060a08688031215610e6b57610e6a611417565b5b6000610e7988828901610d86565b9550506020610e8a88828901610d47565b9450506040610e9b88828901610d71565b9350506060610eac88828901610d71565b9250506080610ebd88828901610d86565b9150509295509295909350565b610ed381611287565b82525050565b610ee2816112ef565b82525050565b6000610ef382611095565b610efd81856110a0565b9350610f0d818560208601611325565b610f168161141c565b840191505092915050565b6000610f2e6044836110a0565b9150610f398261142d565b606082019050919050565b6000610f516019836110a0565b9150610f5c826114a2565b602082019050919050565b6000610f746021836110a0565b9150610f7f826114cb565b604082019050919050565b610f93816112cf565b82525050565b6000602082019050610fae6000830184610eca565b92915050565b6000604082019050610fc96000830185610eca565b610fd66020830184610f8a565b9392505050565b6000602082019050610ff26000830184610ed9565b92915050565b600060208201905081810360008301526110128184610ee8565b905092915050565b6000602082019050818103600083015261103381610f21565b9050919050565b6000602082019050818103600083015261105381610f44565b9050919050565b6000602082019050818103600083015261107381610f67565b9050919050565b600060208201905061108f6000830184610f8a565b92915050565b600081519050919050565b600082825260208201905092915050565b60006110bc826112cf565b91506110c7836112cf565b9250826110d7576110d66113b9565b5b828204905092915050565b60006110ed826112a5565b91506110f8836112a5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111375761113661138a565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111745761117361138a565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111b1576111b061138a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111ee576111ed61138a565b5b828202905092915050565b6000611204826112cf565b915061120f836112cf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112485761124761138a565b5b828202905092915050565b600061125e826112cf565b9150611269836112cf565b92508282101561127c5761127b61138a565b5b828203905092915050565b6000611292826112af565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006112fa82611301565b9050919050565b600061130c82611313565b9050919050565b600061131e826112af565b9050919050565b60005b83811015611343578082015181840152602081019050611328565b83811115611352576000848401525b50505050565b6000600282049050600182168061137057607f821691505b60208210811415611384576113836113e8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f53696e636520436f6e74726163742063616e27742066756c6c66696c6c20746860008201527f6520676f616c2c2046756e646572206d6f6e65792077696c6c2062652072657060208201527f6179656400000000000000000000000000000000000000000000000000000000604082015250565b7f54696d65204f76657220666f72207468652066756e64696e6700000000000000600082015250565b7f596f7520446f6e277420686176652041636365737320746f205769746844726160008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b61152381611287565b811461152e57600080fd5b50565b61153a81611299565b811461154557600080fd5b50565b611551816112a5565b811461155c57600080fd5b50565b611568816112cf565b811461157357600080fd5b50565b61157f816112d9565b811461158a57600080fd5b5056fea26469706673582212201f48fb9281e13db53ca4bed344f6c8c5db1735d8ebe8bba24b416eeea7fdd90f64736f6c63430008070033a26469706673582212203d8b8845e32c06c0889023e2e32eb333708ef41d7dfaf04392287a970dfdef3164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "cap()": {
        "details": "Returns the cap on the token's total supply."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 67,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 69,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 762,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_cap",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1062,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "s_TokenName",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1064,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "s_TokenSYM",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 1066,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_cap",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1068,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "blockReward",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1070,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "TokenAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 887,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "count",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 890,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "token",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(ERC20Token)1254"
      },
      {
        "astId": 892,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "priceFeed",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 896,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "NewFund",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(funding)884_storage)dyn_storage"
      },
      {
        "astId": 900,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "ContractFund",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(funding)884_storage)dyn_storage": {
        "base": "t_struct(funding)884_storage",
        "encoding": "dynamic_array",
        "label": "struct CrowdFunding.funding[]",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Token)1254": {
        "encoding": "inplace",
        "label": "contract ERC20Token",
        "numberOfBytes": "20"
      },
      "t_contract(FundContract)1564": {
        "encoding": "inplace",
        "label": "contract FundContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(funding)884_storage": {
        "encoding": "inplace",
        "label": "struct CrowdFunding.funding",
        "members": [
          {
            "astId": 875,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "Name",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(FundContract)1564"
          },
          {
            "astId": 877,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "ContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 879,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "ContractName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 881,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 883,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "GoalAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}