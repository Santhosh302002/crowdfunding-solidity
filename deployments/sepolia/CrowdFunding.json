{
  "address": "0x2aeb3d245d0d3c0e8496E7Ab5980d00E05DD2ad9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initalSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "TokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "TokenSYM",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reawrd",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "ContractFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NewFund",
      "outputs": [
        {
          "internalType": "contract FundContract",
          "name": "Name",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ContractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ContractName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GoalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ContractName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_Duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "FundingGoal",
          "type": "uint256"
        }
      ],
      "name": "NewFundContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "_blockReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_TokenName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_TokenSYM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x19cdd3e4456304598da730607f3208011fdb2e8c158e147dd49175a06f40fadb",
  "receipt": {
    "to": null,
    "from": "0x0a0179860323B23d990E71f7ee006238D8720179",
    "contractAddress": "0x2aeb3d245d0d3c0e8496E7Ab5980d00E05DD2ad9",
    "transactionIndex": 7,
    "gasUsed": "4493484",
    "logsBloom": "0x
    "blockHash": "0xca1fccc746695eb87f3eb6a06c7a22ac7207f042dba7644731539a569c972c2e",
    "transactionHash": "0x19cdd3e4456304598da730607f3208011fdb2e8c158e147dd49175a06f40fadb",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 3152167,
        "transactionHash": "0x19cdd3e4456304598da730607f3208011fdb2e8c158e147dd49175a06f40fadb",
        "address": "0x2aeb3d245d0d3c0e8496E7Ab5980d00E05DD2ad9",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000a0179860323b23d990e71f7ee006238d8720179"
        ],
        "data": "0x00000000000000000000000000000000000003738632e0f343f90e0d80000000",
        "logIndex": 4,
        "blockHash": "0xca1fccc746695eb87f3eb6a06c7a22ac7207f042dba7644731539a569c972c2e"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 3152167,
        "transactionHash": "0x19cdd3e4456304598da730607f3208011fdb2e8c158e147dd49175a06f40fadb",
        "address": "0x2aeb3d245d0d3c0e8496E7Ab5980d00E05DD2ad9",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002aeb3d245d0d3c0e8496e7ab5980d00e05dd2ad9"
        ],
        "data": "0x00000000000000000000000000000000000003738632e0f343f90e0d80000000",
        "logIndex": 5,
        "blockHash": "0xca1fccc746695eb87f3eb6a06c7a22ac7207f042dba7644731539a569c972c2e"
      }
    ],
    "blockNumber": 3152167,
    "cumulativeGasUsed": "4939389",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "70000000000000000000000000000000",
    "ERECOIN",
    "ERE",
    "1000000000000000000000000000000000",
    "50000",
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "6f58d804423eb1c91edb05862b269bb3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"TokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"TokenSYM\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reawrd\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ContractFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewFund\",\"outputs\":[{\"internalType\":\"contract FundContract\",\"name\":\"Name\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ContractName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GoalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ContractName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FundingGoal\",\"type\":\"uint256\"}],\"name\":\"NewFundContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"_blockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_TokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_TokenSYM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFunding.sol\":\"CrowdFunding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2832d5ad210d6cd042dbc4b7cb70a0e6e4f937b02ad1975085267e7f16f2d781\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CrowdFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./FundContract.sol\\\";\\nimport \\\"./ERC20Token.sol\\\";\\n//0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\n\\ncontract CrowdFunding is ERC20Token{\\n    /* State Variables*/\\n    struct funding{\\n        FundContract Name;\\n        address ContractAddress;\\n        string ContractName;\\n        uint256 duration;\\n        uint256 GoalAmount;\\n    }\\n    uint256 public count=0;\\n    ERC20Token token;\\n    address public priceFeed;\\n    address mainContractAddress;\\n\\n    // FundContract[] public NewFund;      //createing new fund contract \\n    funding[] public NewFund; \\n\\n    mapping(string => address) public ContractFund;\\n\\n\\n    constructor(uint256 initalSupply,\\n        string memory TokenName,\\n        string memory TokenSYM,\\n        uint256 cap,\\n        uint256 reawrd,\\n        address _priceFeed\\n        ) \\n\\n        ERC20Token(initalSupply,\\n        TokenName,\\n        TokenSYM,\\n        cap,\\n        reawrd){\\n            _mint(address(this),initalSupply);\\n            token = ERC20Token(TokenAddress);\\n            priceFeed=_priceFeed;\\n            mainContractAddress=address(this);\\n\\n    }\\n    function NewFundContract(\\n        string memory ContractName,\\n        uint value,\\n        uint256 _Duration,\\n        uint256 FundingGoal\\n        ) public OnlyOwner\\n            {\\n\\n                string memory name= ContractName;\\n                uint256 Duration=_Duration;\\n                new FundContract(\\n                    ContractName,\\n                    i_owner,\\n                    TokenAddress,\\n                    Duration,\\n                    priceFeed,\\n                    FundingGoal,\\n                    mainContractAddress);\\n                NewFund.push(funding(new FundContract(\\n                            ContractName,\\n                            i_owner,\\n                            TokenAddress,\\n                            Duration,\\n                            priceFeed,\\n                            FundingGoal,\\n                            mainContractAddress),\\n                        address(new FundContract(\\n                            ContractName,\\n                            i_owner,\\n                            TokenAddress,\\n                            Duration,\\n                            priceFeed,\\n                            FundingGoal,\\n                            mainContractAddress)),\\n                            ContractName,\\n                            _Duration,\\n                            FundingGoal\\n                            )\\n                            );\\n        ContractFund[name]= address(new FundContract(ContractName,i_owner,TokenAddress,Duration,priceFeed,FundingGoal,mainContractAddress));\\n        _transfer(address(this),address(NewFund[count].Name),value);\\n        count=count+1;\\n    }\\n\\n\\n}\\n\\n\",\"keccak256\":\"0x2e599ac0a6c2e96143bdddd486723e683b6eaac438e5b269b3afc3df9cf8ca49\",\"license\":\"MIT\"},\"contracts/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n\\ncontract ERC20Token is ERC20Capped , ERC20Burnable{\\n    /* State variables*/\\n    address  payable immutable i_owner;\\n    uint256 public immutable i_totalSupply;\\n    string public s_TokenName;\\n    string public s_TokenSYM;\\n    uint256 public  _cap;\\n    uint256 public blockReward;\\n    address public TokenAddress;\\n\\n    constructor(\\n        uint256 initalSupply,\\n        string memory TokenName,\\n        string memory TokenSYM,\\n        uint256 cap,\\n        uint256 reawrd\\n        ) \\n        ERC20(TokenName,TokenSYM) ERC20Capped(cap) {\\n        i_owner=payable(msg.sender);\\n        s_TokenName=TokenName;\\n        s_TokenSYM=TokenSYM;\\n        _cap=cap;\\n        blockReward=reawrd;\\n        i_totalSupply = initalSupply;\\n        _mint(msg.sender,initalSupply);\\n        TokenAddress=address(this);\\n    }\\n    \\n    function burn(uint256 amount) public virtual override OnlyOwner {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function _mintMinerRewards() internal{\\n        _mint(block.coinbase, blockReward);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 value) internal virtual override {\\n        if(from != address(0) && to != block.coinbase && to != address(0))\\n        {\\n            _mintMinerRewards();\\n        }\\n        super._beforeTokenTransfer(from,to,value);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual override (ERC20Capped,ERC20) {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n    \\n    function _blockReward(uint256 reward) public OnlyOwner{\\n        blockReward=reward;\\n    }\\n\\n    modifier OnlyOwner(){\\n        require(msg.sender==i_owner,\\\"Your not the Owner of the contract\\\");\\n        _;\\n    }\\n    \\n\\n}\",\"keccak256\":\"0x48b626310b318ea8baf9a54a1e9f762314581ab49ba9efcd178bf0a738a03ec1\",\"license\":\"MIT\"},\"contracts/FundContract.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"./ERC20Token.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// import \\\"./CrowdFunding.sol\\\";\\n//0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\n\\nerror CantWithDraw();\\n\\ncontract FundContract{\\n\\n    string public ContractName;\\n    address public Owner;\\n    address public contractAddress;\\n    uint256 public erc20balance;\\n    address public con;\\n    uint256 public startTimestamp;\\n    uint256 public duration;\\n    uint256 public GoalAmount;\\n    address public mainContractAddress;\\n\\n    struct funder{\\n        address FunderAddress;\\n        uint256 FundingAmount;\\n    }\\n    funder[] public funding;\\n\\n    mapping(address=>uint256) public funderToAmount;\\n    mapping(address=>uint256) public funderToToken;\\n\\n    ERC20Token token;\\n    AggregatorV3Interface public priceFeed;\\n    constructor (\\n        string memory name,\\n        address _Owner,\\n        address _token,\\n        uint256 _duration,\\n        address _priceFeed,\\n        uint256 _GoalAmount,\\n        address mainContractAddress\\n        // address contractAddress\\n        ) \\n        {\\n            ContractName=name;\\n            Owner=_Owner;\\n            token= ERC20Token(_token);\\n            con=_token;\\n            startTimestamp=block.timestamp;\\n            priceFeed= AggregatorV3Interface(_priceFeed);\\n            duration=_duration;\\n            GoalAmount=_GoalAmount;\\n            mainContractAddress= mainContractAddress;\\n        }\\n    function pay() public payable {\\n        require(block.timestamp - startTimestamp < duration,\\\"Time Over for the funding\\\");\\n        funding.push(funder(msg.sender,msg.value));\\n        token.transfer(msg.sender,msg.value);\\n        funderToAmount[msg.sender]=msg.value;\\n        funderToToken[msg.sender]=msg.value;\\n        token.approve(address(this),msg.value);\\n    }\\n    function erc20token() public{\\n        erc20balance = token.balanceOf(address(this));\\n    }\\n\\n\\n    function totalValue() public view returns(uint256){\\n        return address(this).balance;\\n    }\\n    function withdraw(uint256 amount) public {\\n        require(msg.sender==Owner, \\\"You Don't have Access to WithDraw\\\");\\n        payable(Owner).transfer(amount);\\n    }\\n    function getLatestPrice() public view returns(uint256) {\\n         (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // return price;\\n        return uint256(price * 10000000000);\\n    }\\n    function calculateUSD(uint256 Amount) public returns(uint256){\\n        uint256 price= getLatestPrice();\\n        uint256 ethAmountInUsd = (price * Amount) / 1000000000000000000;\\n        return ethAmountInUsd;\\n    }\\n\\n    function withdraw() public{\\n        require(block.timestamp - startTimestamp > duration && address(this).balance < GoalAmount,\\\"The Goal is meet or The payment is still open\\\");\\n        payable(msg.sender).transfer(funderToAmount[msg.sender]);\\n        token.transferFrom(msg.sender,address(this),funderToAmount[msg.sender]);\\n    }\\n}\\n\",\"keccak256\":\"0x7138a3468fc33d7607785c504b3787d3fb8e8664fdb18ab8f1f07477d592ccfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001b45760003560e01c806370a0823111620000f3578063964bd3af11620000a5578063be1e4b1a116200007b578063be1e4b1a146200052b578063c2cba3061462000565578063c2f2f1661462000587578063dd62ed3e14620005a757620001b4565b8063964bd3af146200049f578063a457c2d714620004bf578063a9059cbb14620004f557620001b4565b806370a0823114620003ad578063741bef1a14620003e357806378d8049a146200040557806379cc6790146200042757806390e000ee146200044757806395d89b41146200047d57620001b4565b806323b872dd116200016b57806339509351116200014157806339509351146200031357806342966c68146200034957806352fb636a14620003695780636adce713146200038b57620001b4565b806323b872dd1462000299578063313ce56714620002cf578063355274ea14620002f157620001b4565b8063060cf4e814620001b957806306661abd14620001db57806306fdde0314620001fd578063095ea7b3146200021f5780630ac168a1146200025557806318160ddd1462000277575b600080fd5b620001c3620005dd565b604051620001d29190620026d2565b60405180910390f35b620001e5620005e3565b604051620001f49190620026d2565b60405180910390f35b62000207620005e9565b60405162000216919062002492565b60405180910390f35b6200023d600480360381019062000237919062001fce565b62000683565b6040516200024c919062002411565b60405180910390f35b6200025f620006aa565b6040516200026e9190620026d2565b60405180910390f35b62000281620006b0565b604051620002909190620026d2565b60405180910390f35b620002b76004803603810190620002b1919062001f72565b620006ba565b604051620002c6919062002411565b60405180910390f35b620002d9620006ef565b604051620002e89190620026ef565b60405180910390f35b620002fb620006f8565b6040516200030a9190620026d2565b60405180910390f35b6200033160048036038101906200032b919062001fce565b62000702565b60405162000340919062002411565b60405180910390f35b620003676004803603810190620003619190620020f7565b62000741565b005b62000373620007ea565b60405162000382919062002492565b60405180910390f35b6200039562000880565b604051620003a4919062002492565b60405180910390f35b620003cb6004803603810190620003c5919062001ef9565b62000916565b604051620003da9190620026d2565b60405180910390f35b620003ed6200095e565b604051620003fc9190620023f4565b60405180910390f35b6200040f62000984565b6040516200041e9190620026d2565b60405180910390f35b6200044560048036038101906200043f919062001fce565b620009a8565b005b6200046560048036038101906200045f919062002015565b620009ce565b604051620004749190620023f4565b60405180910390f35b6200048762000a17565b60405162000496919062002492565b60405180910390f35b620004bd6004803603810190620004b7919062002066565b62000ab1565b005b620004dd6004803603810190620004d7919062001fce565b6200108c565b604051620004ec919062002411565b60405180910390f35b6200051360048036038101906200050d919062001fce565b6200110c565b60405162000522919062002411565b60405180910390f35b620005496004803603810190620005439190620020f7565b62001133565b6040516200055c9594939291906200242e565b60405180910390f35b6200056f6200124a565b6040516200057e9190620023f4565b60405180910390f35b620005a560048036038101906200059f9190620020f7565b62001270565b005b620005c56004803603810190620005bf919062001f2b565b6200130b565b604051620005d49190620026d2565b60405180910390f35b60085481565b600b5481565b606060038054620005fa90620028db565b80601f01602080910402602001604051908101604052809291908181526020018280546200062890620028db565b8015620006795780601f106200064d5761010080835404028352916020019162000679565b820191906000526020600020905b8154815290600101906020018083116200065b57829003601f168201915b5050505050905090565b600080620006906200156e565b90506200069f81858562001576565b600191505092915050565b60095481565b6000600254905090565b600080620006c76200156e565b9050620006d685828562001749565b620006e3858585620017dd565b60019150509392505050565b60006012905090565b6000600554905090565b6000806200070f6200156e565b9050620007368185856200072485896200130b565b62000730919062002792565b62001576565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620007d2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007c990620025e4565b60405180910390fd5b620007e7620007e06200156e565b8262001a64565b50565b60078054620007f990620028db565b80601f01602080910402602001604051908101604052809291908181526020018280546200082790620028db565b8015620008785780601f106200084c5761010080835404028352916020019162000878565b820191906000526020600020905b8154815290600101906020018083116200085a57829003601f168201915b505050505081565b600680546200088f90620028db565b80601f0160208091040260200160405190810160405280929190818152602001828054620008bd90620028db565b80156200090e5780601f10620008e2576101008083540402835291602001916200090e565b820191906000526020600020905b815481529060010190602001808311620008f057829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b620009be82620009b76200156e565b8362001749565b620009ca828262001a64565b5050565b6010818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805462000a2890620028db565b80601f016020809104026020016040519081016040528092919081815260200182805462000a5690620028db565b801562000aa75780601f1062000a7b5761010080835404028352916020019162000aa7565b820191906000526020600020905b81548152906001019060200180831162000a8957829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000b42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b3990620025e4565b60405180910390fd5b60008490506000839050857f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162000be79062001d8f565b62000bf99796959493929190620024b6565b604051809103906000f08015801562000c16573d6000803e3d6000fd5b5050600f6040518060a00160405280887f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162000cc09062001d8f565b62000cd29796959493929190620024b6565b604051809103906000f08015801562000cef573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff168152602001887f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162000da69062001d8f565b62000db89796959493929190620024b6565b604051809103906000f08015801562000dd5573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff16815260200188815260200186815260200185815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019062000ed692919062001d9d565b5060608201518160030155608082015181600401555050857f0000000000000000000000000000000000000000000000000000000000000000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162000f889062001d8f565b62000f9a9796959493929190620024b6565b604051809103906000f08015801562000fb7573d6000803e3d6000fd5b5060108360405162000fca9190620023db565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200106d30600f600b5481548110620010345762001033620029a5565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687620017dd565b6001600b546200107e919062002792565b600b81905550505050505050565b600080620010996200156e565b90506000620010a982866200130b565b905083811015620010f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010e8906200268e565b60405180910390fd5b62001100828686840362001576565b60019250505092915050565b600080620011196200156e565b905062001128818585620017dd565b600191505092915050565b600f81815481106200114457600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054620011b590620028db565b80601f0160208091040260200160405190810160405280929190818152602001828054620011e390620028db565b8015620012345780601f10620012085761010080835404028352916020019162001234565b820191906000526020600020905b8154815290600101906020018083116200121657829003601f168201915b5050505050908060030154908060040154905085565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001301576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012f890620025e4565b60405180910390fd5b8060098190555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6200139c620006f8565b81620013a7620006b0565b620013b3919062002792565b1115620013f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013ee906200264a565b60405180910390fd5b62001403828262001407565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200147a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200147190620026b0565b60405180910390fd5b620014886000838362001c3e565b80600260008282546200149c919062002792565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200154f9190620026d2565b60405180910390a3620015656000838362001d05565b5050565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620015e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015e0906200266c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200165c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001653906200257e565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516200173c9190620026d2565b60405180910390a3505050565b60006200175784846200130b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114620017d75781811015620017c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017be90620025a0565b60405180910390fd5b620017d6848484840362001576565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562001850576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018479062002628565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620018c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018ba906200253a565b60405180910390fd5b620018d083838362001c3e565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562001959576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200195090620025c2565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405162001a499190620026d2565b60405180910390a362001a5e84848462001d05565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001ad7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ace9062002606565b60405180910390fd5b62001ae58260008362001c3e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562001b6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001b65906200255c565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405162001c239190620026d2565b60405180910390a362001c398360008462001d05565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801562001ca857504173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b801562001ce25750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1562001cf35762001cf262001d0a565b5b62001d0083838362001569565b505050565b505050565b62001d184160095462001d1a565b565b62001d24620006f8565b8162001d2f620006b0565b62001d3b919062002792565b111562001d7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001d76906200264a565b60405180910390fd5b62001d8b828262001392565b5050565b611c338062002d9f83390190565b82805462001dab90620028db565b90600052602060002090601f01602090048101928262001dcf576000855562001e1b565b82601f1062001dea57805160ff191683800117855562001e1b565b8280016001018555821562001e1b579182015b8281111562001e1a57825182559160200191906001019062001dfd565b5b50905062001e2a919062001e2e565b5090565b5b8082111562001e4957600081600090555060010162001e2f565b5090565b600062001e6462001e5e8462002735565b6200270c565b90508281526020810184848401111562001e835762001e8262002a08565b5b62001e9084828562002896565b509392505050565b60008135905062001ea98162002d6a565b92915050565b600082601f83011262001ec75762001ec662002a03565b5b813562001ed984826020860162001e4d565b91505092915050565b60008135905062001ef38162002d84565b92915050565b60006020828403121562001f125762001f1162002a12565b5b600062001f228482850162001e98565b91505092915050565b6000806040838503121562001f455762001f4462002a12565b5b600062001f558582860162001e98565b925050602062001f688582860162001e98565b9150509250929050565b60008060006060848603121562001f8e5762001f8d62002a12565b5b600062001f9e8682870162001e98565b935050602062001fb18682870162001e98565b925050604062001fc48682870162001ee2565b9150509250925092565b6000806040838503121562001fe85762001fe762002a12565b5b600062001ff88582860162001e98565b92505060206200200b8582860162001ee2565b9150509250929050565b6000602082840312156200202e576200202d62002a12565b5b600082013567ffffffffffffffff8111156200204f576200204e62002a0d565b5b6200205d8482850162001eaf565b91505092915050565b6000806000806080858703121562002083576200208262002a12565b5b600085013567ffffffffffffffff811115620020a457620020a362002a0d565b5b620020b28782880162001eaf565b9450506020620020c58782880162001ee2565b9350506040620020d88782880162001ee2565b9250506060620020eb8782880162001ee2565b91505092959194509250565b60006020828403121562002110576200210f62002a12565b5b6000620021208482850162001ee2565b91505092915050565b620021348162002846565b82525050565b6200214581620027ef565b82525050565b620021568162002803565b82525050565b62002167816200285a565b82525050565b60006200217a826200276b565b62002186818562002776565b935062002198818560208601620028a5565b620021a38162002a17565b840191505092915050565b6000620021bb826200276b565b620021c7818562002787565b9350620021d9818560208601620028a5565b80840191505092915050565b6000620021f460238362002776565b9150620022018262002a28565b604082019050919050565b60006200221b60228362002776565b9150620022288262002a77565b604082019050919050565b60006200224260228362002776565b91506200224f8262002ac6565b604082019050919050565b600062002269601d8362002776565b9150620022768262002b15565b602082019050919050565b60006200229060268362002776565b91506200229d8262002b3e565b604082019050919050565b6000620022b760228362002776565b9150620022c48262002b8d565b604082019050919050565b6000620022de60218362002776565b9150620022eb8262002bdc565b604082019050919050565b60006200230560258362002776565b9150620023128262002c2b565b604082019050919050565b60006200232c60198362002776565b9150620023398262002c7a565b602082019050919050565b60006200235360248362002776565b9150620023608262002ca3565b604082019050919050565b60006200237a60258362002776565b9150620023878262002cf2565b604082019050919050565b6000620023a1601f8362002776565b9150620023ae8262002d41565b602082019050919050565b620023c4816200282f565b82525050565b620023d58162002839565b82525050565b6000620023e98284620021ae565b915081905092915050565b60006020820190506200240b60008301846200213a565b92915050565b60006020820190506200242860008301846200214b565b92915050565b600060a0820190506200244560008301886200215c565b6200245460208301876200213a565b81810360408301526200246881866200216d565b9050620024796060830185620023b9565b620024886080830184620023b9565b9695505050505050565b60006020820190508181036000830152620024ae81846200216d565b905092915050565b600060e0820190508181036000830152620024d2818a6200216d565b9050620024e3602083018962002129565b620024f260408301886200213a565b620025016060830187620023b9565b6200251060808301866200213a565b6200251f60a0830185620023b9565b6200252e60c08301846200213a565b98975050505050505050565b600060208201905081810360008301526200255581620021e5565b9050919050565b6000602082019050818103600083015262002577816200220c565b9050919050565b60006020820190508181036000830152620025998162002233565b9050919050565b60006020820190508181036000830152620025bb816200225a565b9050919050565b60006020820190508181036000830152620025dd8162002281565b9050919050565b60006020820190508181036000830152620025ff81620022a8565b9050919050565b600060208201905081810360008301526200262181620022cf565b9050919050565b600060208201905081810360008301526200264381620022f6565b9050919050565b6000602082019050818103600083015262002665816200231d565b9050919050565b60006020820190508181036000830152620026878162002344565b9050919050565b60006020820190508181036000830152620026a9816200236b565b9050919050565b60006020820190508181036000830152620026cb8162002392565b9050919050565b6000602082019050620026e96000830184620023b9565b92915050565b6000602082019050620027066000830184620023ca565b92915050565b6000620027186200272b565b905062002726828262002911565b919050565b6000604051905090565b600067ffffffffffffffff821115620027535762002752620029d4565b5b6200275e8262002a17565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006200279f826200282f565b9150620027ac836200282f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620027e457620027e362002947565b5b828201905092915050565b6000620027fc826200280f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600062002853826200286e565b9050919050565b600062002867826200286e565b9050919050565b60006200287b8262002882565b9050919050565b60006200288f826200280f565b9050919050565b82818337600083830152505050565b60005b83811015620028c5578082015181840152602081019050620028a8565b83811115620028d5576000848401525b50505050565b60006002820490506001821680620028f457607f821691505b602082108114156200290b576200290a62002976565b5b50919050565b6200291c8262002a17565b810181811067ffffffffffffffff821117156200293e576200293d620029d4565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f596f7572206e6f7420746865204f776e6572206f662074686520636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b62002d7581620027ef565b811462002d8157600080fd5b50565b62002d8f816200282f565b811462002d9b57600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001c3338038062001c338339818101604052810190620000379190620002d2565b86600090805190602001906200004f92919062000176565b5085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260058190555082600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360068190555081600781905550505050505050506200059a565b828054620001849062000477565b90600052602060002090601f016020900481019282620001a85760008555620001f4565b82601f10620001c357805160ff1916838001178555620001f4565b82800160010185558215620001f4579182015b82811115620001f3578251825591602001919060010190620001d6565b5b50905062000203919062000207565b5090565b5b808211156200022257600081600090555060010162000208565b5090565b60006200023d6200023784620003cd565b620003a4565b9050828152602081018484840111156200025c576200025b62000546565b5b6200026984828562000441565b509392505050565b600081519050620002828162000566565b92915050565b600082601f830112620002a0576200029f62000541565b5b8151620002b284826020860162000226565b91505092915050565b600081519050620002cc8162000580565b92915050565b600080600080600080600060e0888a031215620002f457620002f362000550565b5b600088015167ffffffffffffffff8111156200031557620003146200054b565b5b620003238a828b0162000288565b9750506020620003368a828b0162000271565b9650506040620003498a828b0162000271565b95505060606200035c8a828b01620002bb565b94505060806200036f8a828b0162000271565b93505060a0620003828a828b01620002bb565b92505060c0620003958a828b0162000271565b91505092959891949750929550565b6000620003b0620003c3565b9050620003be8282620004ad565b919050565b6000604051905090565b600067ffffffffffffffff821115620003eb57620003ea62000512565b5b620003f68262000555565b9050602081019050919050565b6000620004108262000417565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200046157808201518184015260208101905062000444565b8381111562000471576000848401525b50505050565b600060028204905060018216806200049057607f821691505b60208210811415620004a757620004a6620004e3565b5b50919050565b620004b88262000555565b810181811067ffffffffffffffff82111715620004da57620004d962000512565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620005718162000403565b81146200057d57600080fd5b50565b6200058b8162000437565b81146200059757600080fd5b50565b61168980620005aa6000396000f3fe60806040526004361061011f5760003560e01c80638e15f473116100a0578063da6b735611610064578063da6b735614610395578063e6fd48bc146103c0578063ef2e2740146103eb578063f6b4dfb414610428578063fd79c2a9146104535761011f565b80638e15f4731461029957806392ca60c1146102c4578063b4a99a4e14610302578063bc8fcb221461032d578063d4c3eea01461036a5761011f565b80633ccfd60b116100e75780633ccfd60b146101c45780634407e1e8146101db57806344ab323b14610218578063741bef1a146102435780638e0f914c1461026e5761011f565b80630b2cb3bc146101245780630fb5a6b41461014f5780631b9265b81461017a5780631dcea427146101845780632e1a7d4d1461019b575b600080fd5b34801561013057600080fd5b5061013961047e565b604051610146919061104e565b60405180910390f35b34801561015b57600080fd5b506101646104a4565b6040516101719190611166565b60405180910390f35b6101826104aa565b005b34801561019057600080fd5b5061019961078e565b005b3480156101a757600080fd5b506101c260048036038101906101bd9190610eaa565b610841565b005b3480156101d057600080fd5b506101d961093d565b005b3480156101e757600080fd5b5061020260048036038101906101fd9190610e50565b610b14565b60405161020f9190611166565b60405180910390f35b34801561022457600080fd5b5061022d610b2c565b60405161023a9190611166565b60405180910390f35b34801561024f57600080fd5b50610258610b32565b60405161026591906110c9565b60405180910390f35b34801561027a57600080fd5b50610283610b58565b6040516102909190611166565b60405180910390f35b3480156102a557600080fd5b506102ae610b5e565b6040516102bb9190611166565b60405180910390f35b3480156102d057600080fd5b506102eb60048036038101906102e69190610eaa565b610c1e565b6040516102f99291906110a0565b60405180910390f35b34801561030e57600080fd5b50610317610c72565b604051610324919061104e565b60405180910390f35b34801561033957600080fd5b50610354600480360381019061034f9190610e50565b610c98565b6040516103619190611166565b60405180910390f35b34801561037657600080fd5b5061037f610cb0565b60405161038c9190611166565b60405180910390f35b3480156103a157600080fd5b506103aa610cb8565b6040516103b7919061104e565b60405180910390f35b3480156103cc57600080fd5b506103d5610cde565b6040516103e29190611166565b60405180910390f35b3480156103f757600080fd5b50610412600480360381019061040d9190610eaa565b610ce4565b60405161041f9190611166565b60405180910390f35b34801561043457600080fd5b5061043d610d1e565b60405161044a919061104e565b60405180910390f35b34801561045f57600080fd5b50610468610d44565b60405161047591906110e4565b60405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600654600554426104bb919061133f565b106104fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f290611106565b60405180910390fd5b600960405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200134815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33346040518363ffffffff1660e01b81526004016106019291906110a0565b602060405180830381600087803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190610e7d565b5034600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555034600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330346040518363ffffffff1660e01b81526004016107399291906110a0565b602060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b9190610e7d565b50565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107e9919061104e565b60206040518083038186803b15801561080157600080fd5b505afa158015610815573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108399190610ed7565b600381905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c890611146565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610939573d6000803e3d6000fd5b5050565b6006546005544261094e919061133f565b11801561095c575060075447105b61099b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099290611126565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610a20573d6000803e3d6000fd5b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518463ffffffff1660e01b8152600401610abf93929190611069565b602060405180830381600087803b158015610ad957600080fd5b505af1158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190610e7d565b50565b600a6020528060005260406000206000915090505481565b60075481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610bc957600080fd5b505afa158015610bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c019190610f04565b5050509150506402540be40081610c1891906111ce565b91505090565b60098181548110610c2e57600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915090505481565b600047905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600080610cef610b5e565b90506000670de0b6b3a76400008483610d0891906112e5565b610d12919061119d565b90508092505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054610d5190611444565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7d90611444565b8015610dca5780601f10610d9f57610100808354040283529160200191610dca565b820191906000526020600020905b815481529060010190602001808311610dad57829003601f168201915b505050505081565b600081359050610de1816115e0565b92915050565b600081519050610df6816115f7565b92915050565b600081519050610e0b8161160e565b92915050565b600081359050610e2081611625565b92915050565b600081519050610e3581611625565b92915050565b600081519050610e4a8161163c565b92915050565b600060208284031215610e6657610e65611503565b5b6000610e7484828501610dd2565b91505092915050565b600060208284031215610e9357610e92611503565b5b6000610ea184828501610de7565b91505092915050565b600060208284031215610ec057610ebf611503565b5b6000610ece84828501610e11565b91505092915050565b600060208284031215610eed57610eec611503565b5b6000610efb84828501610e26565b91505092915050565b600080600080600060a08688031215610f2057610f1f611503565b5b6000610f2e88828901610e3b565b9550506020610f3f88828901610dfc565b9450506040610f5088828901610e26565b9350506060610f6188828901610e26565b9250506080610f7288828901610e3b565b9150509295509295909350565b610f8881611373565b82525050565b610f97816113db565b82525050565b6000610fa882611181565b610fb2818561118c565b9350610fc2818560208601611411565b610fcb81611508565b840191505092915050565b6000610fe360198361118c565b9150610fee82611519565b602082019050919050565b6000611006602d8361118c565b915061101182611542565b604082019050919050565b600061102960218361118c565b915061103482611591565b604082019050919050565b611048816113bb565b82525050565b60006020820190506110636000830184610f7f565b92915050565b600060608201905061107e6000830186610f7f565b61108b6020830185610f7f565b611098604083018461103f565b949350505050565b60006040820190506110b56000830185610f7f565b6110c2602083018461103f565b9392505050565b60006020820190506110de6000830184610f8e565b92915050565b600060208201905081810360008301526110fe8184610f9d565b905092915050565b6000602082019050818103600083015261111f81610fd6565b9050919050565b6000602082019050818103600083015261113f81610ff9565b9050919050565b6000602082019050818103600083015261115f8161101c565b9050919050565b600060208201905061117b600083018461103f565b92915050565b600081519050919050565b600082825260208201905092915050565b60006111a8826113bb565b91506111b3836113bb565b9250826111c3576111c26114a5565b5b828204905092915050565b60006111d982611391565b91506111e483611391565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561122357611222611476565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156112605761125f611476565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561129d5761129c611476565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112da576112d9611476565b5b828202905092915050565b60006112f0826113bb565b91506112fb836113bb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561133457611333611476565b5b828202905092915050565b600061134a826113bb565b9150611355836113bb565b92508282101561136857611367611476565b5b828203905092915050565b600061137e8261139b565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006113e6826113ed565b9050919050565b60006113f8826113ff565b9050919050565b600061140a8261139b565b9050919050565b60005b8381101561142f578082015181840152602081019050611414565b8381111561143e576000848401525b50505050565b6000600282049050600182168061145c57607f821691505b602082108114156114705761146f6114d4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f54696d65204f76657220666f72207468652066756e64696e6700000000000000600082015250565b7f54686520476f616c206973206d656574206f7220546865207061796d656e742060008201527f6973207374696c6c206f70656e00000000000000000000000000000000000000602082015250565b7f596f7520446f6e277420686176652041636365737320746f205769746844726160008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b6115e981611373565b81146115f457600080fd5b50565b61160081611385565b811461160b57600080fd5b50565b61161781611391565b811461162257600080fd5b50565b61162e816113bb565b811461163957600080fd5b50565b611645816113c5565b811461165057600080fd5b5056fea2646970667358221220bbd00b4a8974a5c23f7bdc47351c64851a1f28cc3ffca48975722499035718ba64736f6c63430008070033a2646970667358221220151f7e54b78cbd560337dbcba6c61a18e7c0331d4521aa3f453c0b08d08c252e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "cap()": {
        "details": "Returns the cap on the token's total supply."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 67,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 69,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 762,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_cap",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1075,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "s_TokenName",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1077,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "s_TokenSYM",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_cap",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1081,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "blockReward",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1083,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "TokenAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 887,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "count",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 890,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "token",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(ERC20Token)1267"
      },
      {
        "astId": 892,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "priceFeed",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 894,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "mainContractAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 898,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "NewFund",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(funding)884_storage)dyn_storage"
      },
      {
        "astId": 902,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "ContractFund",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(funding)884_storage)dyn_storage": {
        "base": "t_struct(funding)884_storage",
        "encoding": "dynamic_array",
        "label": "struct CrowdFunding.funding[]",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Token)1267": {
        "encoding": "inplace",
        "label": "contract ERC20Token",
        "numberOfBytes": "20"
      },
      "t_contract(FundContract)1575": {
        "encoding": "inplace",
        "label": "contract FundContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(funding)884_storage": {
        "encoding": "inplace",
        "label": "struct CrowdFunding.funding",
        "members": [
          {
            "astId": 875,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "Name",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(FundContract)1575"
          },
          {
            "astId": 877,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "ContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 879,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "ContractName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 881,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 883,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "GoalAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}